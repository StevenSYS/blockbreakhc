cmake_minimum_required(VERSION 3.10)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

project(BlockBreakC LANGUAGES C VERSION 1.2)

set(IMPL "GLFW3" CACHE STRING "The implementation to build with")
set(HSSIMPL "Dummy" CACHE STRING "The high score saving implementation to build with")
option(BUILD_SHARED_LIBS "Build the libraries as shared libraries" OFF)
option(BUILD_ONLY_IMPL "Build only the implementation library" OFF)
option(BUILD_AS_LIBRARY "Build the game as a library" OFF)
option(BUILD_FOR_I586 "Build ${PROJECT_NAME} for i586 (Intel Pentium) or higher" OFF)
# Windows Compiler Options
option(BUILD_USING_MSVCRT20 "Build ${PROJECT_NAME} using msvcrt20 (Windows Compiler Only)" OFF)
option(BUILD_WITH_RES "Build with the resource file (Windows Compiler Only)" ON)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFONT_WIDTH=8 -DFONT_HEIGHT=8")
set(CMAKE_C_FLAGS_DEBUG "-g -Wall")
set(CMAKE_C_FLAGS_RELEASE "-s -O2")

if(BUILD_FOR_I586)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=i586 -fcf-protection=none")
endif()

if(WIN32)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wl,-subsystem,windows")
	if(BUILD_WITH_RES)
		set(RESOURCE_FILES "src/resource.rc")
	endif()
	if(BUILD_USING_MSVCRT20)
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcrtdll=msvcrt20")
	endif()
elseif(NOT WIN32 AND BUILD_USING_MSVCRT20)
	message(FATAL_ERROR "To build using msvcrt20 you must be using a Windows compiler")
endif()

include_directories(
	"src/random"
	"src/impl"
)

add_subdirectory(src/impl)

if(HSSIMPL STREQUAL "Dummy")
	set(HSSIMPL_FILES "src/impl/highScore/dummy.c")
else()
	message(FATAL_ERROR "Invalid high score saving implementation, the only possible value is \"Dummy\"")
endif()

add_library(HSSImpl STATIC ${HSSIMPL_FILES})
add_library(Random STATIC "src/random/random.c")

if(NOT BUILD_ONLY_LIBRARY)
	file(GLOB SOURCE_FILES "src/*.c")
	
	if(BUILD_AS_LIBRARY)
		add_library(${PROJECT_NAME} ${SOURCE_FILES})
	else()
		add_executable(${PROJECT_NAME} ${RESOURCE_FILES} ${SOURCE_FILES})
		target_include_directories(${PROJECT_NAME} PRIVATE src)
	endif()
	target_link_libraries(
		${PROJECT_NAME}
		Impl
		HSSImpl
		Random
	)
endif()