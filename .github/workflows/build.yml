name: Build
on: [push, pull_request]
defaults:
  run:
    shell: bash
jobs:
  build:
    name: Build ${{matrix.build-targets.name}}
    runs-on: ${{matrix.build-targets.os}}
    strategy:
      matrix:
        build-targets:
          - {
            name: "SDL3 - Linux (x64)",
            os: "ubuntu-latest",
            cFlags: "",
            impl: "SDL3",
            output: "BlockBreakC-SDL3-Linux64",
            upload: "BlockBreakC"
          }
          - {
            name: "FreeGLUT (GLUT) - Linux (x64)",
            os: "ubuntu-latest",
            cFlags: "",
            impl: "GLUT",
            output: "BlockBreakC-FreeGLUT-Linux64",
            upload: "BlockBreakC"
          }
          - {
            name: "GLFW3 - Linux (x64)",
            os: "ubuntu-latest",
            cFlags: "",
            impl: "GLFW3",
            output: "BlockBreakC-GLFW3-Linux64",
            upload: "BlockBreakC"
          }
          - {
            name: "SDL3 + GL - Linux (x64)",
            os: "ubuntu-latest",
            cFlags: "",
            impl: "SDL3GL",
            output: "BlockBreakC-SDL3GL-Linux64",
            upload: "BlockBreakC"
          }
          - {
            name: "raylib - Linux (x64)",
            os: "ubuntu-latest",
            cFlags: "",
            impl: "raylib",
            output: "BlockBreakC-raylib-Linux64",
            upload: "BlockBreakC",
            raylibVersion: "5.5"
          }
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Package Lists
        run: sudo apt update
      
      # SDL3
      - name: SDL3 - Install Dependencies
        if: ${{matrix.build-targets.impl == 'SDL3' || matrix.build-targets.impl == 'SDL3GL'}}
        run: >
          sudo apt install build-essential git make
          pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev
          libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev
          libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev
          libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev
          libwayland-dev libdecor-0-dev liburing-dev
      
      - name: SDL3 - Clone
        if: ${{matrix.build-targets.impl == 'SDL3' || matrix.build-targets.impl == 'SDL3GL'}}
        run: >
          git clone
          --depth 1
          https://github.com/libsdl-org/SDL.git
      
      - name: SDL3 - Configure CMake
        if: ${{matrix.build-targets.impl == 'SDL3' || matrix.build-targets.impl == 'SDL3GL'}}
        run: >
          cmake -S SDL
          -B build/SDL
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=ON
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: SDL3 - Build
        if: ${{matrix.build-targets.impl == 'SDL3' || matrix.build-targets.impl == 'SDL3GL'}}
        run: cmake --build build/SDL
      
      - name: SDL3 - Install
        if: ${{matrix.build-targets.impl == 'SDL3' || matrix.build-targets.impl == 'SDL3GL'}}
        run: sudo cmake --install build/SDL
      
      # FreeGLUT
      - name: FreeGLUT - Install
        if: matrix.build-targets.impl == 'GLUT'
        run: sudo apt install freeglut3-dev
      
      # GLFW3
      - name: GLFW3 - Install Dependencies
        if: matrix.build-targets.impl == 'GLFW3'
        run: sudo apt install libwayland-dev libxkbcommon-dev xorg-dev
      
      - name: GLFW3 - Clone
        if: matrix.build-targets.impl == 'GLFW3'
        run: >
          git clone
          --depth 1
          https://github.com/glfw/glfw.git
      
      - name: GLFW3 - Configure CMake
        if: matrix.build-targets.impl == 'GLFW3'
        run: >
          cmake -S glfw
          -B build/GLFW3
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=ON
          -DGLFW_BUILD_EXAMPLES=OFF
          -DGLFW_BUILD_TESTS=OFF
          -DGLFW_BUILD_DOCS=OFF
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: GLFW3 - Build
        if: matrix.build-targets.impl == 'GLFW3'
        run: cmake --build build/GLFW3
      
      - name: GLFW3 - Install
        if: matrix.build-targets.impl == 'GLFW3'
        run: sudo cmake --install build/GLFW3
      
      # raylib
      - name: raylib - Install Dependencies
        if: matrix.build-targets.impl == 'raylib'
        run: >
          sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev
          libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev
          libxkbcommon-dev
      
      - name: raylib - Clone
        if: matrix.build-targets.impl == 'raylib'
        run: >
          git clone
          --branch ${{matrix.build-targets.raylibVersion}}
          --depth 1
          https://github.com/raysan5/raylib.git
      
      - name: raylib - Configure CMake
        if: matrix.build-targets.impl == 'raylib'
        run: >
          cmake -S raylib
          -B build/raylib
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=ON
          -DBUILD_EXAMPLES=OFF
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: raylib - Build
        if: matrix.build-targets.impl == 'raylib'
        run: cmake --build build/raylib
      
      - name: raylib - Install
        if: matrix.build-targets.impl == 'raylib'
        run: sudo cmake --install build/raylib
      
      - name: Configure CMake
        run: >
          cmake -S . -B build
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=OFF
          -DIMPL=${{matrix.build-targets.impl}}
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: Build
        run: cmake --build build
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.build-targets.output}}
          path: build/${{matrix.build-targets.upload}}